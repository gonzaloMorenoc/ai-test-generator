openapi: 3.0.3
info:
  title: Order Service API
  description: RESTful API for order management, shopping cart, and inventory operations
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@example.com

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /orders:
    post:
      summary: Create a new order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request data

    get:
      summary: List orders with filters
      tags: [Orders]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, shipped, delivered, cancelled]
        - name: user_id
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'

  /orders/{orderId}:
    get:
      summary: Get order by ID
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      summary: Update order status
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully

    delete:
      summary: Cancel order
      tags: [Orders]
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order cancelled successfully

  /products:
    get:
      summary: List products
      tags: [Products]
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: in_stock
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully

  /products/{productId}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/search:
    get:
      summary: Search products with filters
      tags: [Products]
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: price_min
          in: query
          schema:
            type: number
        - name: price_max
          in: query
          schema:
            type: number
        - name: in_stock
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSearchResponse'

  /users/{userId}/orders:
    get:
      summary: Get order history for user
      tags: [Orders]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's order history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'

components:
  schemas:
    Order:
      type: object
      properties:
        order_id:
          type: string
          example: "ord_123456"
        user_id:
          type: string
          example: "user_123"
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shipping_address:
          $ref: '#/components/schemas/Address'
        total_amount:
          type: number
          format: decimal
          example: 159.98
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateOrderRequest:
      type: object
      required: [items, shipping_address]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        shipping_address:
          $ref: '#/components/schemas/Address'

    UpdateOrderRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered, cancelled]

    OrderItem:
      type: object
      properties:
        product_id:
          type: string
          example: "prod_001"
        product_name:
          type: string
          example: "Wireless Headphones"
        quantity:
          type: integer
          example: 2
        unit_price:
          type: number
          format: decimal
          example: 79.99
        total_price:
          type: number
          format: decimal
          example: 159.98

    OrderItemRequest:
      type: object
      required: [product_id, quantity, unit_price]
      properties:
        product_id:
          type: string
        quantity:
          type: integer
          minimum: 1
        unit_price:
          type: number
          format: decimal

    Product:
      type: object
      properties:
        product_id:
          type: string
          example: "prod_001"
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
        category:
          type: string
          example: "electronics"
        price:
          type: number
          format: decimal
          example: 79.99
        in_stock:
          type: boolean
          example: true
        stock_quantity:
          type: integer
          example: 50

    CreateProductRequest:
      type: object
      required: [name, category, price]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: number
          format: decimal
        stock_quantity:
          type: integer

    Address:
      type: object
      required: [street, city, zip]
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        zip:
          type: string
          example: "10001"
        country:
          type: string
          example: "USA"

    OrderList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          type: object
          properties:
            page:
              type: integer
            total_count:
              type: integer
            total_pages:
              type: integer

    ProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          type: object
          properties:
            page:
              type: integer
            total_count:
              type: integer

    ProductSearchResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total_count:
          type: integer
        filters_applied:
          type: object